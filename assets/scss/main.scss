// @import './variables';
// @import './fonts';
@import '~/assets/scss/variables';

html,
body {
    padding: 0px;
    margin: 0px;
}

html {
    height: 100%;
    font-size: 100%; // base font of 16px

    // This is for iOS accessibility - larger text setting
    @supports (font: -apple-system-body) {
        font: -apple-system-body;
    }
}
body {
    margin: 0;
    min-height: 100%;
    font-family: 'Poppins', sans-serif;
    font-weight: 400;
    line-height: 1.5;
    background-color: var(--bg-primary);
    color: var(--text-primary);
    transition: background-color 0.3s;
}

// Global Elements
h1 {
}
h2 {
}
h3 {
    color: var(--header-primary);
}
h4 {
    color: var(--header-secondary);
}
p {
    margin-bottom: 1.5rem;
}
a {
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

// Updating highlight text
::selection {
    background: $color-blush-20; /* WebKit/Blink Browsers */
}
::-moz-selection {
    background: $color-blush-20; /* Gecko Browsers */
}

// Tailwind classes that aren't working
.grow {
    flex-grow: 1 !important;
}

// Need to refactor
nav,
.menu {
    color: var(--text-navigation);
}

// .menu {
//     z-index: 2;
// }

.theme-icon {
    fill: var(--text-primary);
}

// Marker effect - Maybe create a component for this - special effects?
.highlight {
    display: inline-block;
    color: inherit;
    position: relative;
    z-index: 0;

    &::before {
        background-color: rgba($color-blush-40, 0.6);
    }

    &.tailwind::before {
        background-color: rgba($color-blue-30, 0.6);
    }

    &.vue::before {
        background-color: rgba($color-green-20, 0.6);
    }

    &::after,
    &::before {
        content: '';
        display: block;
        height: 50%;
        // height: 0.5em;
        position: absolute;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: -1;
        transform: translateZ(0.4px) scale(1.1) translateY(-10%) rotate(-1deg);
    }

    // &::after {
    //     background-color: var(--color-primary);
    //     transform: scaleX(0);
    //     transform-origin: 0 50%;
    //     transition: transform 0.3s cubic-bezier(0.86, 0, 0.07, 1);

    //     &:hover {
    //         transform: scaleX(1);
    //     }
    // }
}

.angle {
    position: relative;

    &::after {
        content: '';
        position: absolute;
    }

    &.angle-slant-up {
        // background-color: var(--bg-secondary);
        background-color: var(--bg-primary);
        height: 60px;
        width: 100%;
        margin-top: -60px;

        &::after {
            width: 100%;
            height: 60px;
            background-color: var(--bg-secondary);
            clip-path: polygon(100% 100%, 0% 100%, 0 0);
            // clip-path: polygon(0% 100%, 100% 0, 0 0);

            // -webkit-clip-path: polygon(100% 100%, 100% 0, 0 0);
            // clip-path: polygon(100% 100%, 100% 0, 0 0);
        }
    }
    &.angle-slant-down {
        background-color: var(--bg-primary);
        height: 60px;
        width: 100%;

        &::after {
            width: 100%;
            height: 60px;
            background-color: var(--bg-secondary);
            -webkit-clip-path: polygon(100% 100%, 100% 0, 0 0);
            clip-path: polygon(100% 100%, 100% 0, 0 0);
        }
    }

    &.angle-v-down {
        background-color: var(--bg-secondary);
        height: 60px;
        width: 100%;

        &::after {
            width: 100%;
            height: 60px;
            background-color: var(--bg-primary);
            // -webkit-clip-path: polygon(100% 100%, 100% 0, 0 0);
            // clip-path: polygon(100% 100%, 100% 0, 0 0); // slant
            clip-path: polygon(100% 0, 100% 0%, 50% 100%, 0% 0%);
            // clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%); // diamond
        }
    }

    &.angle-v-down-transparent {
        background-color: var(--bg-secondary);
        height: 60px;
        width: 100%;

        &::after {
            width: 100%;
            height: 60px;
            background-color: var(--bg-primary);
            // -webkit-clip-path: polygon(100% 100%, 100% 0, 0 0);
            // clip-path: polygon(100% 100%, 100% 0, 0 0); // slant
            clip-path: polygon(100% 0, 100% 0%, 50% 100%, 0% 0%);
            // clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%); // diamond
        }
    }
}

// TODO: Move these to the layout scss or page scss - should not be in main.scss
.background {
    min-height: 100vh;
    height: 500px;
    filter: blur(0.5px);
    -webkit-filter: blur(0.5px);
    position: absolute;
    @apply inset-0;
    z-index: -1;

    background: url('~/assets/images/global/computer-bg-square.jpg') no-repeat
        center center;
    background-size: cover;

    @screen md {
        background-position: top left;
        background-attachment: fixed;
        background-image: url('~/assets/images/global/computer-bg-light.jpg');
    }

    // .dark-mode & {
    //     background: url('~/assets/images/global/computer-bg-square.jpg')
    //         no-repeat center center;
    //     background-size: cover;

    //     @screen md {
    //         background-position: top left;
    //         background-attachment: fixed;
    //         background-image: url('~/assets/images/global/computer-bg-light.jpg');
    //     }
    // }
}

.cover {
    min-height: 100vh;
    height: 500px;
    background: linear-gradient(
            to bottom,
            rgba(255, 255, 255, 1),
            rgba(255, 255, 255, 0.25),
            rgba(255, 255, 255, 0),
            rgba(255, 255, 255, 0),
            rgba(255, 255, 255, 0)
        ),
        linear-gradient(
            to top,
            rgba(255, 255, 255, 0.2),
            rgba(255, 255, 255, 0.2)
        );

    .dark-mode & {
        background: linear-gradient(
            to bottom,
            rgba(0, 0, 0, 0.6),
            rgba(0, 0, 0, 0.25),
            rgba(0, 0, 0, 0),
            rgba(0, 0, 0, 0),
            rgba(0, 0, 0, 0)
        );
        // linear-gradient(to top, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2));
    }

    .intro {
        display: flex;
        flex-grow: 1;
        align-items: center;
        justify-content: flex-end;

        .text {
            position: relative;
            z-index: 1;
            width: 100%;
            max-width: 37.5rem;
            padding: 1.5rem 2rem;
            background-color: var(--bg-overlay);
            color: var(--text-primary);
        }
    }

    .mobile-menu {
        position: fixed;
        @apply inset-0;
        z-index: 10;
        overflow: hidden;
    }

    // TODO: See if I can come up with a solution with not making it absolute
    // .menu-icon,
    .close-icon {
        top: 48px;
        position: fixed;
        right: 46px;
    }
}
